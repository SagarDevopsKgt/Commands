Absolutely! Hereâ€™s a comprehensive list of **systemctl** commands DevOps engineers commonly use in real-world scenarios, mainly for managing Linux system services (systemd-based systems like Ubuntu, CentOS, RHEL, Fedora):

---

## **Common systemctl Commands for DevOps Engineers**

### **Service Management**
```bash
sudo systemctl start <service>        # Start a service
sudo systemctl stop <service>         # Stop a service
sudo systemctl restart <service>      # Restart a service
sudo systemctl reload <service>       # Reload service configuration
sudo systemctl status <service>       # Show current status of a service
sudo systemctl enable <service>       # Enable service to start at boot
sudo systemctl disable <service>      # Disable service from starting at boot
sudo systemctl is-active <service>    # Check if service is active
sudo systemctl is-enabled <service>   # Check if service is enabled
sudo systemctl mask <service>         # Completely disable a service
sudo systemctl unmask <service>       # Re-enable a masked service
```

### **System State & Target Management**
```bash
sudo systemctl reboot                 # Reboot the system
sudo systemctl poweroff               # Power off the system
sudo systemctl halt                   # Halt the system
sudo systemctl suspend                # Suspend system
sudo systemctl rescue                 # Boot into rescue (single-user) mode
sudo systemctl isolate <target>       # Switch to another target (runlevel)
```

### **Listing & Querying Services**
```bash
systemctl list-units --type=service                # List all loaded services
systemctl list-unit-files --type=service           # List all service unit files
systemctl list-dependencies <service>              # List dependencies for a service
systemctl show <service>                           # Detailed info about a service
systemctl cat <service>                            # Show the unit file contents
```

### **Logs & Troubleshooting**
```bash
journalctl -u <service>                            # View logs for a specific service
journalctl -xe                                     # View systemd's error logs
systemctl reset-failed <service>                   # Reset failed state for a service
```

### **Reloading & Daemon Management**
```bash
sudo systemctl daemon-reload                       # Reload systemd manager configuration
sudo systemctl daemon-reexec                       # Restart systemd manager itself
```

### **Timers & Scheduled Jobs**
```bash
systemctl list-timers                              # List all active timers
systemctl status <timer>                           # Check timer status
```

---

### **Example Services**
- `nginx`
- `httpd`
- `docker`
- `mysql`
- `apache2`
- `ssh`
- `jenkins`

---

### **Quick References**
- Replace `<service>` with the actual service name (e.g., `nginx`, `docker`).
- Most commands require `sudo` for administrative access.

---

If you need real-time examples for a specific service (like Docker, Nginx, etc.), or further details on advanced usage (such as creating custom unit files), let me know!
